.. include:: ../def.rst


.. _sec_sql_criando_tabelas:

Criando Tabelas
===============


O comando SQL :sql:`CREATE TABLE` permite criar novas tabelas no banco de dados. A sintaxe básica desse comando é mostrada abaixo:


.. code-block:: text

    CREATE TABLE <nome-tabela>
    (
        <nome-coluna> <tipo-dados> [<restrição-coluna>]
        [, <nome-coluna> <tipo-dados> [<restrição-coluna>] ]
        [, <restrição-tabela> [, <restrição-tabela> ] ]
    );


Onde:

.. rst-class:: open

- ``nome-tabela``: O nome de uma tabela deve começar por uma letra (``a-z``) ou pelo caracter sublinhado ``_``, e os demais caracteres podem ser letras, dígitos (``0-9``) ou o caracter sublinhado ``_``. Alguns exemplos de nomes válidos são: ``foco``, ``foco_v2``, ``estudante_disciplina``, ``populacao_1940``. Opcionalmente, o nome de uma tabela pode ser qualificado com o nome de um esquema. Neste caso usamos a sintaxe ``nome-esquema.nome-tabela``. Como exemplo de nomes de tabelas qualificados com o esquema, podemos citar: ``public.foco``, ``geo.lote``, ``ibge.populacao_brasil``.

    .. note::

        Outro detalhe importante sobre o nome de tabelas consiste no uso de delimitadores com aspas duplas (``"``). Neste caso, podemos criar identificadores contendo caracteres especiais, além de diferenciar letras maiúsculas e minúsculas. Exemplos: ``"Foco"``, ``"Foco v2"``, ``ibge."População do Brasil"``.


        No entanto, esse recurso deve ser utilizado com moderação para não dificultar o uso dos identificadores na construção de consultas, uma vez que será necessário empregar os delimitadores (``"``).


    .. note::

        Os nomes de tabelas são limitados a no máximo 63 bytes. Logo, se usarmos apenas letras (``a-z``), dígitos (``0-9``) ou sublinhado (``_``), isto significa um identificador de 63 caracteres.


- ``nome-coluna``: O nome de colunas segue a mesma regra do nome de tabelas. A única diferença nesse caso é que não usamos a qualificação com o nome do esquema para colunas.


- ``tipo-dados``: Podemos usar os tipos de dados discutidos nas Seções :numref:`%s <sec_sql_tipos_dados>` e :numref:`%s <sec_sql_tipos_geometricos>`.


- ``restrição-coluna``: É possível especificar restrições de integridade a serem mantidas pelo SGBD em relação ao valores da coluna. Os tipos mais comuns de restrições incluem:

    - ``NOT NULL``: Especifica que a coluna é obrigatória.
    - ``NULL``: Especifica que podemos armazenar valores ``NULL`` na coluna.
    - ``CHECK ( expressão )``: Uma expressão lógica envolvendo o valor a ser inserido ou atualizado na coluna que deva ser avaliado como verdadeiro para que o valor seja considerado válido. Usaremos este tipo de restrição nas tabelas que criaremos nessa seção.
    - ``DEFAULT expressão``: Um valor padrão caso a coluna seja omitida nas inserções.
    - ``GENERATED { ALWAYS | BY DEFAULT } AS IDENTITY``: Será usado um valor gerado a partir de uma sequência autoincremental.
    - ``UNIQUE``: Indica que a coluna deverá ter valores únicos.
    - ``PRIMARY KEY``: Indica que a coluna é chave primária e, portanto, possui valores únicos.
    - ``REFERENCES``: Permite definir a coluna como uma chave estrangeira, referenciando a coluna de outra tabela.


- ``restrição-tabela``: Após as declarações das colunas, podemos incluir restrições que se aplicam à linha da tabela. Neste caso, podemos ter chaves primárias compostas, chaves estrangeiras compostas, chaves únicas compostas e retrições que envolvam valores de várias colunas. Portanto, podemos declarar as seguintes retrições:

    - ``CHECK ( expressão )``: Uma expressão lógica que deve ser avaliada como verdadeiro para que os valores sendo inseridos na linha sejam considerados válidos.
    - ``UNIQUE``: Lista de colunas que formam uma chave única composta.
    - ``PRIMARY KEY``: Lista de colunas que formam uma chave primária composta.
    - ``FOREIGN KEY``: Lista de colunas que formam uma chave estrangeira composta.


Exemplo Criação de Tabela
-------------------------


Vamos criar uma tabela de exemplo chamada ``sedes_municipais`` com a seguinte estrutura:


.. table:: ``sedes_municipais``.
    :align: center
    :header-alignment: center center center center
    :column-alignment: center left center left

    +-------------+----------------------------+-----------------------------------------------------+
    | nome tabela: **sedes_municipais**                                                              +
    +-------------+----------------------------+-----------------------------------------------------+
    | colunas     | tipo de dados              | modificadores                                       |
    +=============+============================+=====================================================+
    | gid         | número inteiro             | chave primária                                      |
    +-------------+----------------------------+-----------------------------------------------------+
    | nome        | texto de tamanho variável  | limitado a 50 caracteres                            |
    +-------------+----------------------------+-----------------------------------------------------+
    | localizacao | geometria                  | geometrias do subtipo ponto associados ao SRID 4326 |
    +-------------+----------------------------+-----------------------------------------------------+


O comando de criação dessa tabela é mostrado abaixo:


.. code-block:: sql

    CREATE TABLE sedes_municipais
    (
        gid          SERIAL PRIMARY KEY,
        nome         VARCHAR(50),
        localizacao  GEOMETRY(POINT, 4326)
    );


Para inserir tuplas (linhas ou registros) na tabela ``sedes_municipais``:


.. code-block:: sql

    INSERT INTO sedes_municipais (nome, localizacao)
         VALUES ('São Carlos', ST_GeomFromText('POINT(-47.88497 -22.02557)', 4326) ),
                ('Ouro Preto', ST_GeomFromText('POINT(-43.51592 -20.38144)', 4326) ),
                ('São José dos Campos', ST_GeomFromText('POINT(-45.90245 -23.20000)', 4326) );


Para consultar os metadados da tabela com feições denominada ``sedes_municipais``:


.. code-block:: sql

    SELECT * FROM geometry_columns WHERE f_table_name = 'sedes_municipais';


-----

**Exercício:** Visualizar a tabela acima no QGIS.


Estudo de Caso
--------------


Considere o **diagrama Entidade-Relacionamento** (**ER**) mostrado na :numref:`Figura %s <fig:sql:criando-tabelas:diagrama-er>`.


.. figure:: ../img/sql/criando-tabelas/diagrama-er.png
    :alt: Diagrama ER - Operações de crédito rural e glebas.
    :width: 80%
    :figclass: align-center
    :name: fig:sql:criando-tabelas:diagrama-er

    Diagrama ER - Operações de crédito rural contratadas por pessoas físicas.


Nesse diagrama temos as seguintes informações:

.. rst-class:: open

- Um *Contratante* possui propriedades como: CPF, nome, gênero, classificação ou porte do agricultor e a data de seu cadastro no banco de dados. O atributo destacado ``cpf`` indica que os valores nessa coluna são únicos e, portanto, identifica unicamente um determinado contratante.

- Uma *Operação*, ou contrato de financiamento, possui propriedades como: número do contrato, valor do financiamento, o período do contrato (data de início e fim). O atributo destacado ``numero_contrato`` indica que os valores nessa coluna são únicos e, portanto, identifica unicamente um determinado contrato.

- O relacionamento entre *Contratante* e *Operação* possui uma cardinalidade de ``M:N`` (``M`` para ``N``), isto é, um certo contratante pode contratar uma ou mais operações e uma operação pode estar associada a um ou mais contratantes. Além disso, esse relacionamento possui um atributo que corresponde à data de assinatura do contrato pelo contratante.

- Uma *Gleba* possui duas propriedades: identificador da gleba (``gid``) e a geometria representando os limites da área da gleba.

- O relacionamento entre *Operação* e *Gleba* possui uma cardinalidade de ``1:N`` (``1`` para ``N``), isto é, um contrato pode referenciar uma ou mais glebas e uma gleba somente pode estar associada a um contrato.

- Um *Município* possui propriedades como: identificador (``gid``), código do IBGE (``geocodigo``), nome e ogeometria representando os limites da área do município.

- O relacionamento entre *Gleba* e *Município* é um relacionamento espacial, indicado de "maneira informal" pelas linhas tracejadas.


.. note::

    A notação do Diagrama ER não permite representar relacionamentos espaciais. No exemplo acima, fizemos uma adaptação para ilustrar as informações que vamos manipular mais adiante.


A :numref:`Figura %s <fig:sql:criando-tabelas:cardinalidade-er>` apresenta a cardinalidade envolvida nos relacionamentos do diagrama acima:


.. figure:: ../img/sql/criando-tabelas/cardinalidade-er.png
    :alt: Exemplo da cardinalidade dos relacionamento do Diagrama ER - Operações de crédito rural contratadas por pessoas físicas
    :width: 80%
    :figclass: align-center
    :name: fig:sql:criando-tabelas:cardinalidade-er

    Exemplo da cardinalidade dos relacionamento do Diagrama ER - Operações de crédito rural contratadas por pessoas físicas.


A partir da compreensão do diagrama ER, podemos criar um novo diagrama mais próximo da implementação que faremos no PostgreSQL (:numref:`Figura %s <fig:sql:criando-tabelas:modelo-logico>`):


.. figure:: ../img/sql/criando-tabelas/modelo-logico.png
    :alt: Modelo lógico - Operações de crédito rural contratadas por pessoas físicas
    :width: 80%
    :figclass: align-center
    :name: fig:sql:criando-tabelas:modelo-logico

    Modelo lógico - Operações de crédito rural contratadas por pessoas físicas.


Comandos de Definição de Dados
++++++++++++++++++++++++++++++


Agora que temos o modelo das tabelas que queremos criar e sabemos a sintaxe básica do comando ``CREATE TABLE``, vamos definir as tabelas ``contratante``, ``contratante_operacao``, ``operacao``, ``gleba`` e ``municipio`` usando SQL.


-----


**Tabela:** ``contratante:``


.. code-block:: postgresql

    CREATE TABLE estudante
    (
        matricula        INTEGER PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
        nome             VARCHAR(30) NOT NULL,
        data_nascimento  DATE NOT NULL,
        genero           CHAR(1) NOT NULL CHECK ( genero = 'M' OR genero = 'F' ),
        data_matricula   DATE NOT NULL DEFAULT CURRENT_DATE
    );


Na definição da tabela ``contratante_operacao`` temos:

.. rst-class:: open

- A coluna ``matricula`` foi definida como chave primária (``PRIMARY KEY``), comportando valores do tipo inteiro (``INTEGER``) gerados sequencialmente e automaticamente pelo servidor (``GENERATED ALWAYS AS IDENTITY``).

- A coluna ``nome`` foi definida como uma cadeia de caracteres de tamanho variável limitada a no máximo 30 caracteres, sendo os valores dessa coluna obrigatórios (``NOT NULL``).

- A coluna ``data_nascimento`` foi definida como sendo do tipo data (``DATE``) e obrigatória (``NOT NULL``).

- A coluna ``genero`` foi definida como um caracter de tamanho 1, com uma **restrição** (**check constraint**) de uso apenas dos caracteres ``M`` ou ``F``.

- A coluna ``data_matricula`` terá o valor padrão da data corrente do sistema no caso de ser omitida na inserção.


-----


**Tabela:** ``operacao``


.. code-block:: postgresql

    CREATE TABLE professor
    (
        codigo   INTEGER PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
        nome     VARCHAR(30) NOT NULL
    );


-----


**Tabela:** ``gleba``


.. code-block:: postgresql
    :emphasize-lines: 6-8

    CREATE TABLE disciplina
    (
        codigo           INTEGER PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
        titulo           VARCHAR(30) NOT NULL,
        creditos         INTEGER NOT NULL CHECK ( creditos >= 1 AND creditos <= 6 ),
        professor_codigo INTEGER NOT NULL REFERENCES professor(codigo)
                                              ON DELETE NO ACTION
                                              ON UPDATE CASCADE
    );


Nessa tabela temos a definição de uma **chave estrangeira**, impondo um relacionamento de **integridade referencial** entre as tabelas ``professor`` e ``disciplina`` nas colunas ``codigo`` e ``professor_codigo``. A sentença ``ON DELETE NO ACTION`` indica que no caso de remoção de linhas da tabela ``professor`` que tenham disciplinas associadas, deverá ser gerado um erro, impedindo a remoção das linhas da tabela ``professor``. A setença ``ON UPDATE CASCADE``, define que no caso de atualização da chave primária na tabela ``professor``, o novo valor deva ser propagado automaticamente para as linhas relacionadas na tabela ``disciplina``.


.. note::

    Abaixo apresentamos como criar a chave estrangeira na seção dedicada a restrições da linha:

    .. code-block:: postgresql
        :emphasize-lines: 7-9

        CREATE TABLE disciplina2
        (
            codigo           INTEGER PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
            titulo           VARCHAR(30) NOT NULL,
            creditos         INTEGER NOT NULL CHECK ( creditos >= 1 AND creditos <= 6 ),
            professor_codigo INTEGER NOT NULL,
            FOREIGN KEY (professor_codigo) REFERENCES professor(codigo)
                                           ON DELETE NO ACTION
                                           ON UPDATE CASCADE
        );


-----


**Tabela:** ``municipio``


.. code-block:: postgresql
    :emphasize-lines: 10


    CREATE TABLE estudante_disciplina
    (
        matricula   INTEGER REFERENCES estudante(matricula)
                                            ON DELETE NO ACTION
                                            ON UPDATE CASCADE,
        codigo       INTEGER REFERENCES disciplina(codigo)
                                            ON DELETE NO ACTION
                                            ON UPDATE CASCADE,
        data         DATE NOT NULL DEFAULT CURRENT_DATE,
        PRIMARY KEY (matricula, codigo)
    );


Repare na definição da tabela acima que:

.. rst-class:: open

- A coluna ``matricula`` pois uma restrição de chave estrangeira, referenciando a coluna ``matricula`` na tabela ``estudante``.

- A coluna ``codigo`` também possui uma restrição de chave estrangeira, referenciando a coluna ``codigo`` na tabela ``disciplina``.

- A **chave primária** dessa tabela é **composta** e, por isso, foi definida logo após a declaração de todas as colunas. Desta forma, podemos especificar as colunas ``matricula`` e ``codigo`` como a chave primária.